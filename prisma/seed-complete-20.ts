import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

// Donn√©es de base
const countries = [
  { name: 'Cameroun', code: 'CM' },
  { name: 'France', code: 'FR' },
  { name: 'S√©n√©gal', code: 'SN' },
  { name: 'C√¥te d\'Ivoire', code: 'CI' },
  { name: 'Mali', code: 'ML' },
  { name: 'Burkina Faso', code: 'BF' },
  { name: 'Niger', code: 'NE' },
  { name: 'Tchad', code: 'TD' },
  { name: 'Gabon', code: 'GA' },
  { name: 'Congo', code: 'CG' },
  { name: 'RDC', code: 'CD' },
  { name: 'Rwanda', code: 'RW' },
  { name: 'Burundi', code: 'BI' },
  { name: 'Tanzanie', code: 'TZ' },
  { name: 'Kenya', code: 'KE' },
  { name: 'Ouganda', code: 'UG' },
  { name: 'Ghana', code: 'GH' },
  { name: 'Nigeria', code: 'NG' },
  { name: 'B√©nin', code: 'BJ' },
  { name: 'Togo', code: 'TG' }
];

const cities = [
  'Douala', 'Yaound√©', 'Garoua', 'Bamenda', 'Maroua', 'Ngaound√©r√©', 'Bertoua', 'Ebolowa', 'Kumba', 'Bafoussam',
  'Paris', 'Lyon', 'Marseille', 'Toulouse', 'Nice', 'Nantes', 'Strasbourg', 'Montpellier', 'Bordeaux', 'Lille',
  'Dakar', 'Thi√®s', 'Kaolack', 'Ziguinchor', 'Saint-Louis', 'Diourbel', 'Tambacounda', 'Kolda', 'Fatick', 'Matam',
  'Abidjan', 'Bouak√©', 'Daloa', 'Korhogo', 'Yamoussoukro', 'San-P√©dro', 'Gagnoa', 'Man', 'Divo', 'Anyama',
  'Bamako', 'Sikasso', 'S√©gou', 'Mopti', 'Koutiala', 'San', 'Kati', 'Kayes', 'Kita', 'Nioro'
];

const tenantNames = [
  'Pressing Elite', 'Clean Express', 'Laundry Pro', 'Fresh Clean', 'Spotless Service',
  'Quick Wash', 'Premium Press', 'Clean Corner', 'Wash & Go', 'Fresh Start',
  'Laundry Master', 'Clean Zone', 'Express Wash', 'Spot Free', 'Clean House',
  'Wash Center', 'Fresh Press', 'Clean Spot', 'Quick Clean', 'Laundry Hub'
];

const serviceNames = [
  'Pressing au Kilo', 'Nettoyage √† Sec', 'Blanchisserie', 'Repassage Express', 'Nettoyage Tapis',
  'Lavage Voiture', 'Nettoyage Bureau', 'Entretien Textile', 'Blanchiment', 'Teinture',
  'R√©novation Cuir', 'Nettoyage Rideaux', 'Lavage Couette', 'Pressing Chemise', 'Nettoyage Manteau',
  'Blanchisserie H√¥tel', 'Service Express', 'Nettoyage Industriel', 'Entretien Uniforme', 'Service Premium'
];

const customerNames = [
  'Jean Dupont', 'Marie Martin', 'Pierre Durand', 'Sophie Bernard', 'Michel Leroy',
  'Isabelle Moreau', 'Philippe Petit', 'Catherine Roux', 'Alain Simon', 'Fran√ßoise Laurent',
  'Robert David', 'Monique Thomas', 'Claude Richard', 'Nicole Petit', 'G√©rard Moreau',
  'Sylvie Bernard', 'Andr√© Martin', 'Jacqueline Dubois', 'Marcel Robert', 'Colette Richard'
];

const supplierNames = [
  'Fournisseur Pro', 'Distrib Clean', 'Supply Express', 'Clean Source', 'Wash Supply',
  'Fresh Distrib', 'Clean Partner', 'Supply Master', 'Distrib Plus', 'Clean Source Pro',
  'Wash Distrib', 'Fresh Supply', 'Clean Express', 'Supply Zone', 'Distrib Clean',
  'Clean Master', 'Supply Pro', 'Fresh Distrib', 'Wash Source', 'Clean Supply'
];

const taskTitles = [
  'Nettoyage urgent', 'Maintenance √©quipement', 'Formation personnel', 'Inventaire stock',
  'R√©paration machine', 'Nettoyage profondeur', 'Formation client', 'Audit qualit√©',
  'Mise √† jour syst√®me', 'Nettoyage sp√©cialis√©', 'Formation s√©curit√©', 'Contr√¥le qualit√©',
  'R√©paration urgente', 'Nettoyage pr√©ventif', 'Formation technique', 'Audit s√©curit√©',
  'Maintenance pr√©ventive', 'Nettoyage express', 'Formation produit', 'Contr√¥le √©quipement'
];

const promotionNames = [
  'R√©duction 20%', 'Livraison gratuite', 'Offre sp√©ciale', 'Pack famille', 'R√©duction √©tudiant',
  'Offre senior', 'Pack entreprise', 'R√©duction fid√©lit√©', 'Offre premi√®re commande', 'Pack premium',
  'R√©duction volume', 'Offre weekend', 'Pack d√©couverte', 'R√©duction parrainage', 'Offre anniversaire',
  'Pack saisonnier', 'R√©duction groupe', 'Offre express', 'Pack fid√©lit√©', 'R√©duction premium'
];

const notificationTitles = [
  'Nouvelle commande', 'Commande pr√™te', 'Paiement re√ßu', 'Livraison effectu√©e', 'Nouveau client',
  'Stock faible', 'Maintenance requise', 'Formation programm√©e', 'Audit pr√©vu', 'Nouvelle promotion',
  'Commande annul√©e', 'Paiement en retard', 'Livraison report√©e', 'Client satisfait', 'Stock r√©approvisionn√©',
  'Maintenance termin√©e', 'Formation compl√©t√©e', 'Audit termin√©', 'Promotion expir√©e', 'Syst√®me mis √† jour'
];

const conversationTitles = [
  'Demande de tarifs', 'Probl√®me de livraison', 'Question sur service', 'R√©clamation qualit√©', 'Demande d\'information',
  'Probl√®me de paiement', 'Question technique', 'Demande de devis', 'R√©clamation retard', 'Information produit',
  'Demande d\'aide', 'Question facturation', 'Probl√®me commande', 'Demande modification', 'Question livraison',
  'R√©clamation service', 'Demande annulation', 'Question remboursement', 'Probl√®me technique', 'Demande assistance'
];

async function main() {
  console.log('üå± D√©but du seeding avec 20+ enregistrements par table...\n');

  // 1. Cr√©er les pays (20)
  console.log('üìç Cr√©ation des pays...');
  const createdCountries = [];
  for (const country of countries) {
    const created = await prisma.country.upsert({
      where: { code: country.code },
      update: {},
      create: country,
    });
    createdCountries.push(created);
  }
  console.log(`‚úÖ ${createdCountries.length} pays cr√©√©s`);

  // 2. Cr√©er les tenants (20)
  console.log('üè¢ Cr√©ation des tenants...');
  const createdTenants = [];
  for (let i = 0; i < 20; i++) {
    const tenant = await prisma.tenant.upsert({
      where: { subdomain: `tenant-${i + 1}` },
      update: {},
      create: {
        name: tenantNames[i % tenantNames.length],
        subdomain: `tenant-${i + 1}`,
        domain: `tenant-${i + 1}.e6wash.com`,
        logo: null,
        settings: {
          currency: 'XAF',
          timezone: 'Africa/Douala',
          workingHours: {
            start: '08:00',
            end: '18:00',
            days: ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi']
          },
          deliveryRadius: 10,
          allowCashPayment: true,
          allowOnlinePayment: true,
          autoAssignCollectors: true
        },
        status: 'ACTIVE'
      },
    });
    createdTenants.push(tenant);
  }
  console.log(`‚úÖ ${createdTenants.length} tenants cr√©√©s`);

  // 3. Cr√©er les agences (20)
  console.log('üè™ Cr√©ation des agences...');
  const createdAgencies = [];
  for (let i = 0; i < 20; i++) {
    const agency = await prisma.agency.upsert({
      where: { code: `AG${String(i + 1).padStart(3, '0')}` },
      update: {},
      create: {
        tenantId: createdTenants[i % createdTenants.length].id,
        name: `Agence ${cities[i % cities.length]}`,
        address: `${Math.floor(Math.random() * 999) + 1} Avenue ${cities[i % cities.length]}`,
        phone: `+237 6${Math.floor(Math.random() * 99)} ${Math.floor(Math.random() * 999)} ${Math.floor(Math.random() * 999)}`,
        email: `contact@agence-${i + 1}.com`,
        countryId: createdCountries[i % createdCountries.length].id,
        city: cities[i % cities.length],
        isActive: Math.random() > 0.1, // 90% actives
        code: `AG${String(i + 1).padStart(3, '0')}`,
        capacity: Math.floor(Math.random() * 200) + 50,
        isMainAgency: i % 5 === 0, // Une agence principale tous les 5
        settings: {
          workingHours: {
            start: '08:00',
            end: '18:00',
            days: ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi']
          }
        }
      },
    });
    createdAgencies.push(agency);
  }
  console.log(`‚úÖ ${createdAgencies.length} agences cr√©√©es`);

  // 4. Cr√©er les utilisateurs (25)
  console.log('üë• Cr√©ation des utilisateurs...');
  const createdUsers = [];
  const roles = ['SUPER_ADMIN', 'ADMIN', 'OWNER', 'MANAGER', 'EMPLOYEE', 'CAISSIER', 'COLLECTOR'];
  
  for (let i = 0; i < 25; i++) {
    const hashedPassword = await bcrypt.hash('password123', 10);
    const user = await prisma.user.upsert({
      where: { email: `user${i + 1}@example.com` },
      update: {},
      create: {
        name: `User ${i + 1}`,
        fullname: `User ${i + 1} Fullname`,
        email: `user${i + 1}@example.com`,
        password: hashedPassword,
        role: roles[i % roles.length] as any,
        tenantId: createdTenants[i % createdTenants.length].id,
        agencyId: createdAgencies[i % createdAgencies.length].id,
        phoneNumber: `+237 6${Math.floor(Math.random() * 99)} ${Math.floor(Math.random() * 999)} ${Math.floor(Math.random() * 999)}`,
        address: `${Math.floor(Math.random() * 999) + 1} Rue ${cities[i % cities.length]}`,
        isActive: Math.random() > 0.1
      },
    });
    createdUsers.push(user);
  }
  console.log(`‚úÖ ${createdUsers.length} utilisateurs cr√©√©s`);

  // 5. Cr√©er les clients (25)
  console.log('üë§ Cr√©ation des clients...');
  const createdCustomers = [];
  for (let i = 0; i < 25; i++) {
    const customer = await prisma.customer.create({
      data: {
        tenantId: createdTenants[i % createdTenants.length].id,
        agencyId: createdAgencies[i % createdAgencies.length].id,
        fullname: `${customerNames[i % customerNames.length]} Fullname`,
        email: `customer${i + 1}@example.com`,
        phone: `+237 6${Math.floor(Math.random() * 99)} ${Math.floor(Math.random() * 999)} ${Math.floor(Math.random() * 999)}`,
        address: `${Math.floor(Math.random() * 999) + 1} Rue ${cities[i % cities.length]}`,
        isActive: Math.random() > 0.1
      },
    });
    createdCustomers.push(customer);
  }
  console.log(`‚úÖ ${createdCustomers.length} clients cr√©√©s`);

  // 6. Cr√©er les services (25)
  console.log('üîß Cr√©ation des services...');
  const createdServices = [];
  const serviceCategories = ['WASHING', 'IRONING', 'DRY_CLEANING', 'REPAIR', 'OTHER'];
  const serviceTypes = ['DETAIL', 'KILO'];
  for (let i = 0; i < 25; i++) {
    const service = await prisma.service.create({
      data: {
        tenantId: createdTenants[i % createdTenants.length].id,
        name: serviceNames[i % serviceNames.length],
        description: `Description du service ${serviceNames[i % serviceNames.length]}`,
        price: Math.floor(Math.random() * 50000) + 5000,
        category: serviceCategories[i % serviceCategories.length] as any,
        type: serviceTypes[i % serviceTypes.length] as any,
        isActive: Math.random() > 0.1,
        estimatedTime: `${Math.floor(Math.random() * 24) + 1}h`
      },
    });
    createdServices.push(service);
  }
  console.log(`‚úÖ ${createdServices.length} services cr√©√©s`);

  // 7. Cr√©er les commandes (30)
  console.log('üì¶ Cr√©ation des commandes...');
  const createdOrders = [];
  const orderStatuses = ['NEW', 'PROCESSING', 'READY', 'COMPLETED', 'CANCELLED'];
  const orderPaymentMethods = ['CASH', 'MOBILE_MONEY', 'BANK_TRANSFER', 'CARD'];
  
  for (let i = 0; i < 30; i++) {
    const order = await prisma.order.create({
      data: {
        tenantId: createdTenants[i % createdTenants.length].id,
        agencyId: createdAgencies[i % createdAgencies.length].id,
        customerId: createdCustomers[i % createdCustomers.length].id,
        orderNumber: `ORD-${new Date().getFullYear()}${String(i + 1).padStart(4, '0')}`,
        status: orderStatuses[i % orderStatuses.length] as any,
        totalAmount: Math.floor(Math.random() * 100000) + 10000,
        paymentMethod: orderPaymentMethods[i % orderPaymentMethods.length] as any,
        paymentStatus: Math.random() > 0.2 ? 'PAID' : 'PENDING',
        pickupDate: new Date(Date.now() + Math.random() * 7 * 24 * 60 * 60 * 1000),
        deliveryDate: new Date(Date.now() + Math.random() * 14 * 24 * 60 * 60 * 1000),
        notes: `Notes pour la commande ${i + 1}`,
        createdById: createdUsers[i % createdUsers.length].id,
        updatedById: createdUsers[i % createdUsers.length].id
      },
    });
    createdOrders.push(order);
  }
  console.log(`‚úÖ ${createdOrders.length} commandes cr√©√©es`);

  // 8. Cr√©er les √©l√©ments de commande (60)
  console.log('üìã Cr√©ation des √©l√©ments de commande...');
  for (let i = 0; i < 60; i++) {
    await prisma.orderItem.create({
      data: {
        orderId: createdOrders[i % createdOrders.length].id,
        serviceId: createdServices[i % createdServices.length].id,
        name: `Article ${i + 1}`,
        quantity: Math.floor(Math.random() * 10) + 1,
        unitPrice: Math.floor(Math.random() * 20000) + 5000,
        totalPrice: Math.floor(Math.random() * 100000) + 10000,
        notes: `Notes pour l'√©l√©ment ${i + 1}`
      },
    });
  }
  console.log(`‚úÖ 60 √©l√©ments de commande cr√©√©s`);

  // 9. Cr√©er les t√¢ches (25)
  console.log('üìù Cr√©ation des t√¢ches...');
  const createdTasks = [];
  const taskPriorities = ['LOW', 'MEDIUM', 'HIGH', 'URGENT'];
  const taskStatuses = ['PENDING', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED'];
  
  for (let i = 0; i < 25; i++) {
    const task = await prisma.task.create({
      data: {
        tenantId: createdTenants[i % createdTenants.length].id,
        title: taskTitles[i % taskTitles.length],
        description: `Description de la t√¢che ${taskTitles[i % taskTitles.length]}`,
        priority: taskPriorities[i % taskPriorities.length] as any,
        status: taskStatuses[i % taskStatuses.length] as any,
        dueDate: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000),
        assignedToId: createdUsers[i % createdUsers.length].id,
        createdById: createdUsers[i % createdUsers.length].id
      },
    });
    createdTasks.push(task);
  }
  console.log(`‚úÖ ${createdTasks.length} t√¢ches cr√©√©es`);

  // 10. Cr√©er l'inventaire (25)
  console.log('üì¶ Cr√©ation de l\'inventaire...');
  const createdInventory = [];
  const inventoryCategories = ['DETERGENT', 'BAG', 'HANGER', 'EQUIPMENT', 'OTHER'];
  const units = ['L', 'kg', 'pi√®ce', 'm¬≤', 'g'];
  
  for (let i = 0; i < 25; i++) {
    const inventory = await prisma.inventory.create({
      data: {
        tenantId: createdTenants[i % createdTenants.length].id,
        agencyId: createdAgencies[i % createdAgencies.length].id,
        name: `Article ${i + 1}`,
        category: inventoryCategories[i % inventoryCategories.length] as any,
        currentStock: Math.floor(Math.random() * 100) + 10,
        minStock: Math.floor(Math.random() * 20) + 5,
        unit: units[i % units.length],
        unitPrice: Math.floor(Math.random() * 10000) + 1000,
        supplier: supplierNames[i % supplierNames.length],
        isLowStock: Math.random() > 0.8
      },
    });
    createdInventory.push(inventory);
  }
  console.log(`‚úÖ ${createdInventory.length} articles d'inventaire cr√©√©s`);

  // 11. Cr√©er les notifications (25)
  console.log('üîî Cr√©ation des notifications...');
  const createdNotifications = [];
  const notificationTypes = ['ORDER', 'PAYMENT', 'DELIVERY', 'SYSTEM', 'PROMOTION'];
  
  for (let i = 0; i < 25; i++) {
    const notification = await prisma.internalNotification.create({
      data: {
        tenantId: createdTenants[i % createdTenants.length].id,
        userId: createdUsers[i % createdUsers.length].id,
        title: notificationTitles[i % notificationTitles.length],
        content: `Message de notification ${i + 1}`,
        createdById: createdUsers[i % createdUsers.length].id,
        readAt: Math.random() > 0.5 ? new Date() : null
      },
    });
    createdNotifications.push(notification);
  }
  console.log(`‚úÖ ${createdNotifications.length} notifications cr√©√©es`);

  // 12. Cr√©er les promotions (25)
  console.log('üéâ Cr√©ation des promotions...');
  const createdPromotions = [];
  const promoTypes = ['percentage', 'fixed_amount'];
  
  for (let i = 0; i < 25; i++) {
    const promotion = await prisma.promo.create({
      data: {
        tenantId: createdTenants[i % createdTenants.length].id,
        name: promotionNames[i % promotionNames.length],
        description: `Description de la promotion ${promotionNames[i % promotionNames.length]}`,
        type: promoTypes[i % promoTypes.length],
        value: Math.floor(Math.random() * 50) + 5,
        startDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),
        endDate: new Date(Date.now() + Math.random() * 60 * 24 * 60 * 60 * 1000),
        isActive: Math.random() > 0.2
      },
    });
    createdPromotions.push(promotion);
  }
  console.log(`‚úÖ ${createdPromotions.length} promotions cr√©√©es`);

  // 13. Cr√©er les groupes de fid√©lit√© (20)
  console.log('üíé Cr√©ation des groupes de fid√©lit√©...');
  const createdLoyaltyGroups = [];
  for (let i = 0; i < 20; i++) {
    const loyaltyGroup = await prisma.loyalGroup.create({
      data: {
        tenantId: createdTenants[i % createdTenants.length].id,
        name: `Groupe Fid√©lit√© ${i + 1}`,
        minOrders: Math.floor(Math.random() * 20) + 5,
        discount: Math.floor(Math.random() * 200) + 50,
        isActive: Math.random() > 0.1
      },
    });
    createdLoyaltyGroups.push(loyaltyGroup);
  }
  console.log(`‚úÖ ${createdLoyaltyGroups.length} groupes de fid√©lit√© cr√©√©s`);

  // 14. Cr√©er les abonnements (20)
  console.log('üìã Cr√©ation des abonnements...');
  const createdSubscriptions = [];
  for (let i = 0; i < 20; i++) {
    const subscription = await prisma.subscription.create({
      data: {
        name: `Plan ${i + 1}`,
        price: Math.floor(Math.random() * 100000) + 20000,
        maxAgencies: Math.floor(Math.random() * 10) + 1,
        maxUsers: Math.floor(Math.random() * 50) + 5,
        maxOrdersPerMonth: Math.floor(Math.random() * 1000) + 100,
        features: {
          support: '24/7',
          analytics: true
        },
        isActive: Math.random() > 0.1
      },
    });
    createdSubscriptions.push(subscription);
  }
  console.log(`‚úÖ ${createdSubscriptions.length} abonnements cr√©√©s`);

  // 15. Cr√©er les fournisseurs (20)
  console.log('üöö Cr√©ation des fournisseurs...');
  const createdSuppliers = [];
  for (let i = 0; i < 20; i++) {
    const supplier = await prisma.supplier.create({
      data: {
        tenantId: createdTenants[i % createdTenants.length].id,
        name: supplierNames[i % supplierNames.length],
        email: `contact@${supplierNames[i % supplierNames.length].toLowerCase().replace(/\s+/g, '')}.com`,
        phone: `+237 6${Math.floor(Math.random() * 99)} ${Math.floor(Math.random() * 999)} ${Math.floor(Math.random() * 999)}`,
        address: `${Math.floor(Math.random() * 999) + 1} Avenue ${cities[i % cities.length]}`,
        contact: `Contact ${i + 1}`,
        isActive: Math.random() > 0.1
      },
    });
    createdSuppliers.push(supplier);
  }
  console.log(`‚úÖ ${createdSuppliers.length} fournisseurs cr√©√©s`);

  // 16. Cr√©er les abonnements tenant (25)
  console.log('üí∞ Cr√©ation des abonnements tenant...');
  const createdTenantSubscriptions = [];
  const subscriptionStatuses = ['ACTIVE', 'SUSPENDED', 'CANCELLED', 'EXPIRED'];
  
  for (let i = 0; i < 25; i++) {
    const tenantSubscription = await prisma.tenantSubscription.create({
      data: {
        tenantId: createdTenants[i % createdTenants.length].id,
        subscriptionId: createdSubscriptions[i % createdSubscriptions.length].id,
        status: subscriptionStatuses[i % subscriptionStatuses.length] as any,
        startDate: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000),
        endDate: new Date(Date.now() + Math.random() * 365 * 24 * 60 * 60 * 1000)
      },
    });
    createdTenantSubscriptions.push(tenantSubscription);
  }
  console.log(`‚úÖ ${createdTenantSubscriptions.length} abonnements tenant cr√©√©s`);

  // 17. Cr√©er les conversations (20)
  console.log('üí¨ Cr√©ation des conversations...');
  const createdConversations = [];
  for (let i = 0; i < 20; i++) {
    const conversation = await prisma.conversation.create({
      data: {
        tenantId: createdTenants[i % createdTenants.length].id,
        title: conversationTitles[i % conversationTitles.length],
        type: 'DIRECT',
        isActive: Math.random() > 0.2,
        createdById: createdUsers[i % createdUsers.length].id
      },
    });
    createdConversations.push(conversation);
  }
  console.log(`‚úÖ ${createdConversations.length} conversations cr√©√©es`);

  // 18. Cr√©er les messages (50)
  console.log('üì® Cr√©ation des messages...');
  for (let i = 0; i < 50; i++) {
    await prisma.message.create({
      data: {
        conversationId: createdConversations[i % createdConversations.length].id,
        content: `Contenu du message ${i + 1}`,
        messageType: 'TEXT',
        senderId: createdUsers[i % createdUsers.length].id
      },
    });
  }
  console.log(`‚úÖ 50 messages cr√©√©s`);

  // 19. Cr√©er les paiements (30)
  console.log('üí≥ Cr√©ation des paiements...');
  const createdPayments = [];
  const paymentMethods = ['CASH', 'MOBILE_MONEY', 'BANK_TRANSFER', 'CARD'];
  const paymentStatuses = ['PENDING', 'PAID', 'PARTIAL', 'REFUNDED'];
  
  for (let i = 0; i < 30; i++) {
    const payment = await prisma.payment.create({
      data: {
        orderId: createdOrders[i % createdOrders.length].id,
        agencyId: createdAgencies[i % createdAgencies.length].id,
        amount: Math.floor(Math.random() * 100000) + 10000,
        method: paymentMethods[i % paymentMethods.length] as any,
        status: paymentStatuses[i % paymentStatuses.length] as any,
        transactionId: `TXN-${Date.now()}-${i}`,
        paidAt: Math.random() > 0.2 ? new Date() : null,
        userId: createdUsers[i % createdUsers.length].id
      },
    });
    createdPayments.push(payment);
  }
  console.log(`‚úÖ ${createdPayments.length} paiements cr√©√©s`);

  console.log('\nüéâ Seeding termin√© avec succ√®s !');
  console.log('\nüìä R√©sum√© des donn√©es cr√©√©es :');
  console.log(`üìç Pays: ${createdCountries.length}`);
  console.log(`üè¢ Tenants: ${createdTenants.length}`);
  console.log(`üè™ Agences: ${createdAgencies.length}`);
  console.log(`üë• Utilisateurs: ${createdUsers.length}`);
  console.log(`üë§ Clients: ${createdCustomers.length}`);
  console.log(`üîß Services: ${createdServices.length}`);
  console.log(`üì¶ Commandes: ${createdOrders.length}`);
  console.log(`üìã √âl√©ments de commande: 60`);
  console.log(`üìù T√¢ches: ${createdTasks.length}`);
  console.log(`üì¶ Inventaire: ${createdInventory.length}`);
  console.log(`üîî Notifications: ${createdNotifications.length}`);
  console.log(`üéâ Promotions: ${createdPromotions.length}`);
  console.log(`üíé Groupes de fid√©lit√©: ${createdLoyaltyGroups.length}`);
  console.log(`üìã Abonnements: ${createdSubscriptions.length}`);
  console.log(`üöö Fournisseurs: ${createdSuppliers.length}`);
  console.log(`üí∞ Abonnements tenant: ${createdTenantSubscriptions.length}`);
  console.log(`üí¨ Conversations: ${createdConversations.length}`);
  console.log(`üì® Messages: 50`);
  console.log(`üí≥ Paiements: ${createdPayments.length}`);
}

main()
  .catch((e) => {
    console.error('‚ùå Erreur lors du seeding:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
